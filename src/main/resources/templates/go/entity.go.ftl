<#-- Function to build struct tags consistently -->
<#function build_tags gormTag="", jsonTag="", validationTag="", defaultGormTag="">
    <#assign tag_parts = []>
    <#if gormTag?has_content && gormTag?trim != "">
        <#assign tag_parts = tag_parts + [gormTag?trim]>
    <#elseif defaultGormTag?has_content && defaultGormTag?trim != "">
        <#assign tag_parts = tag_parts + [defaultGormTag?trim]>
    </#if>
    <#if jsonTag?has_content && jsonTag?trim != "">
        <#assign tag_parts = tag_parts + [jsonTag?trim]>
    </#if>
    <#if validationTag?has_content && validationTag?trim != "">
        <#assign tag_parts = tag_parts + [validationTag?trim]>
    </#if>
    <#if tag_parts?has_content>
        <#return '`' + tag_parts?join(" ") + '`'>
    <#else>
        <#return ""> <#-- Return empty string if no tags to avoid empty `` -->
    </#if>
</#function>
package ${packageName}

<#if imports?has_content && imports?size gt 0>
import (
    <#assign stdLibImports = []>
    <#assign thirdPartyImports = []>
    <#-- Sort the imports from the Java Set for consistent ordering -->
    <#list imports?sort as imp>
        <#if !imp?contains(".") || imp?starts_with("golang.org/x/") || imp == "time"> <#-- "time" is stdlib -->
            <#assign stdLibImports = stdLibImports + [imp]>
        <#else>
            <#assign thirdPartyImports = thirdPartyImports + [imp]>
        </#if>
    </#list>
    <#-- Output stdlib imports, sorted -->
    <#list stdLibImports?sort as imp>
    "${imp}"
    </#list>
    <#-- Newline between import groups if both exist and have content -->
    <#if stdLibImports?has_content && thirdPartyImports?has_content>

    </#if>
    <#-- Output third-party imports, sorted -->
    <#list thirdPartyImports?sort as imp>
    "${imp}"
    </#list>
)
</#if>

<#if description?has_content>
// ${structName} ${description}
<#else>
// ${structName} defines the data model for a ${structName?lower_case}.
</#if>
type ${structName} struct {
<#if embedGormModel>
    gorm.Model <#-- Provides ID, CreatedAt, UpdatedAt, DeletedAt by GORM -->
<#else>
    <#-- Manual ID field if not embedding gorm.Model -->
    <#if idField??>
        <#if idField.description?has_content>
    // ${idField.description}
        </#if>
    ${idField.name} ${idField.type} ${build_tags(idField.gormTag, idField.jsonTag, idField.validationTag, 'gorm:"primaryKey"')}
    </#if>
</#if>

<#-- Attributes -->
<#if attributes?has_content>
    <#list attributes as attr>
        <#if attr.description?has_content>
    // ${attr.description}
        </#if>
    ${attr.name} ${attr.type} ${build_tags(attr.gormTag, attr.jsonTag, attr.validationTag)}
    </#list>
</#if>

<#-- Relationships -->
<#if relationships?has_content>
    <#list relationships as rel>
        <#if rel.description?has_content>
    // ${rel.description}
        </#if>
    ${rel.name} ${rel.type} ${build_tags(rel.gormTag, rel.jsonTag, rel.validationTag)}
    </#list>
</#if>

<#-- Manual Timestamp fields if not embedding gorm.Model and they are provided -->
<#if !embedGormModel>
    <#if createdAtField??>
        <#if createdAtField.description?has_content>
    // ${createdAtField.description}
        <#else>
    // CreatedAt specifies the creation time of this record.
        </#if>
    ${createdAtField.name} ${createdAtField.type} ${build_tags(createdAtField.gormTag, createdAtField.jsonTag, createdAtField.validationTag)}
    </#if>
    <#if updatedAtField??>
        <#if updatedAtField.description?has_content>
    // ${updatedAtField.description}
        <#else>
    // UpdatedAt specifies the last update time of this record.
        </#if>
    ${updatedAtField.name} ${updatedAtField.type} ${build_tags(updatedAtField.gormTag, updatedAtField.jsonTag, updatedAtField.validationTag)}
    </#if>
</#if>
}

<#-- Generate TableName method if tableName is provided -->
<#if tableName?has_content && tableName?trim != "">
// TableName overrides the default table name generated by GORM for ${structName}.
func (${structName}) TableName() string {
    return "${tableName}"
}
</#if>