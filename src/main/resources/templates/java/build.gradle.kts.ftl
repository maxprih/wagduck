<#-- build.gradle.kts - Generated by WagDuck -->
plugins {
    id("java")
    id("org.springframework.boot") version "${springBootVersion}"
    id("io.spring.dependency-management") version "1.1.5" // Consider making version dynamic or using a recent stable one
<#if useKotlin>
    // Apply Kotlin plugins only if Kotlin is used
    kotlin("jvm") version "1.9.23" // Consider making Kotlin version dynamic, e.g., ${kotlinVersion}
    kotlin("plugin.spring") version "1.9.23" // Match JVM version
    kotlin("plugin.jpa") version "1.9.23" // Match JVM version (for no-arg constructor)
    id("org.jetbrains.kotlin.kapt") version "1.9.23" // Kapt needed for annotation processors in Kotlin
</#if>
}

group = "${groupId}"
version = "${version}"
java.sourceCompatibility = JavaVersion.toVersion("${javaVersion}")

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters (Versions managed by dependencyManagement plugin)
    <#list springBootStarters as dep>
    implementation("${dep.groupId}:${dep.artifactId}")
    </#list>

    // Database Dependencies
    <#list databaseDependencies as dep>
    ${dep.scope!"implementation"}("${dep.groupId}:${dep.artifactId}<#if dep.version??>:${dep.version}</#if>") <#-- Default to implementation if scope missing -->
    </#list>

    // Utility Dependencies - Rely on explicit scopes from the model
    <#list utilityDependencies as dep>
    ${dep.scope!"implementation"}("${dep.groupId}:${dep.artifactId}<#if dep.version??>:${dep.version}</#if>") <#-- Version added if present in model -->
    </#list>

    // Test Dependencies
    <#list testDependencies as dep>
    ${dep.scope!"testImplementation"}("${dep.groupId}:${dep.artifactId}<#if dep.version??>:${dep.version}</#if>") <#-- Default to testImplementation -->
    </#list>

<#if useKotlin>
    // Kotlin Standard Library
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8") // Or make version dynamic
</#if>
}

// --- Task Configuration ---

// Configure Java Annotation Processing (e.g., for MapStruct)
tasks.withType<JavaCompile> {
    options.annotationProcessorPath = configurations.annotationProcessor.get() // Set processor path
    // Pass arguments for processors used by Java source
    options.compilerArgs.addAll(listOf(
        "-Amapstruct.defaultComponentModel=spring" // Example for MapStruct
        // Add other Java annotation processor args here if needed
    ))
}

<#if useKotlin>
// Configure Kapt for Kotlin Annotation Processing (e.g., for MapStruct)
kapt {
    arguments {
        arg("mapstruct.defaultComponentModel", "spring")
        // Add other Kapt arguments here if needed
    }
    // Optional: Correct error types for Kapt if needed
    // correctErrorTypes = true
}

// Configure Kotlin Compiler Options
tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
     kotlinOptions {
         freeCompilerArgs = listOf(
             "-Xjsr305=strict" // Example compiler arg
             // Add other Kotlin compiler args here
         )
         jvmTarget = "${javaVersion}" // Align Kotlin JVM target with Java version
     }
}
</#if>

// Configure Tests
tasks.withType<Test> {
    useJUnitPlatform() // Use JUnit 5 platform
}

// Optional: Spring Boot specific tasks configuration (e.g., BootJar)
// bootJar {
//    mainClass.set("${basePackage}.YourApplication") // Set main class if needed
// }
